#!/usr/bin/env ruby
#
# Copyright (c) 2011, 2015 Matthias Rabe (mrabe@hatdev.de)
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

def h(txt)
	return(nil) if txt.nil?

	[["\\", "\\textbackslash"], ["_", "\\_"], ["\"", "\"'"], ["&", "\\\\&"]].each {|x| key, val= x
		txt= txt.gsub(key, " #{val} ")
	}

	return(txt)
end

def conv_img4latex(fname_old)
	fname= fname_old
	if not ["jpg", "jpeg", "png"].include? fname.split('.')[-1].downcase
		fname= File.dirname(fname_old) + "/" + File.basename(fname_old).gsub('.', '_') + ".png"
		if not File.exist? fname
			cmd= "convert \"#{fname_old}\" \"#{fname}\""
			msg= `#{cmd}`
			raise "exec failed #{cmd.inspect} -- return #{$?.exitstatus}\nmsg: #{msg}" if $?.exitstatus != 0
		end
	end
	return(fname)
end

def replace_newline(text)
	s= ""
	i= 0
	text.each_char {|c|
		if c == "\n"
			i += 1
			next
		elsif i > 0
			s += "\\\\" + (i > 1 ? "[#{(i-1)*2}mm]": "")
			i= 0
		end
		s += c
	}
	return(s)
end

class Latex < File
	def self.open(*)
		_f= super
		_f.print """% Generated by gedreport #{$params[:reporttype] if not $params.nil?} using $Id: latex.inc.rb 57 2011-03-12 21:41:42Z mg $
\\documentclass[10pt,a4paper,best]{scrreprt}
\\usepackage{color}
\\usepackage{graphics}
\\usepackage{graphicx}
\\usepackage{ucs} 
\\usepackage[utf8x]{inputenc}
\\PrerenderUnicode{รถ}
\\usepackage{multirow}
\\usepackage{german}
\\usepackage{tikz}
\\usepackage[T1]{fontenc}
\\usepackage{textcomp}
\\usepackage[hypertexnames=false]{hyperref}
\\usepackage{wrapfig}
\\usepackage{subfig}
\\usepackage{calc}
\\usetikzlibrary{shapes,trees,arrows}
\\usepackage{geometry}
\\geometry{a4paper,left=20mm,right=20mm, top=10mm, bottom=25mm} 

\\newcommand{\\HRule}{\\rule{\\linewidth}{0.5mm}}
\\newcommand{\\ThinHRule}{\\rule{\\linewidth}{0.1mm}}
\\newcommand{\\incImage}[2]{\\noindent\\setlength\\fboxsep{0pt}\\setlength\\fboxrule{0.5pt}\\fbox{\\includegraphics[#1]{#2}}}
\\newcommand{\\incImageC}[2]{\\noindent\\parbox{\\textwidth}{\\centering \\incImage{#1}{#2}}}

\\definecolor{light-gray}{gray}{0.88}
\\captionsetup[subfloat]{labelformat=empty}

\\begin{document}
"""
		return(_f)
	end

	def insertTitle(params)
		print """
\\begin{titlepage}
\\begin{center}
 
\\vspace*{3cm}
\\HRule \\\\[0.4cm]
{\\huge \\bfseries #{h(params[:main])}}\\\\[0.4cm]
\\HRule \\\\[2cm]
 
\\vfill
 
% Bottom of the page
{\\large #{h(params[:foot])}}
 
\\end{center}
\\end{titlepage}
"""
		return(true)
	end

	def insertIndex()
		puts "\\tableofcontents"
		return(true)
	end

	def insertSeperator(text)
		newpage()
		print """
\\begin{center}

\\vspace*{5cm}
{\\huge \\bfseries #{h(text)}}\\\\[0.4cm]

\\end{center}
"""
		newpage()
		return(true)
	end

	def insertChapter(str, id= nil);	puts "\\chapter{#{h(str)}}";		insertLabel(id);	return(true); end
	def insertSection(str, id= nil);	puts "\\section{#{h(str)}}";		insertLabel(id);	return(true); end
	def insertSubSection(str, id= nil);	puts "\\subsection{#{h(str)}}"; 	insertLabel(id);	return(true); end
	def insertSubSubSection(str, id= nil);	puts "\\subsubsection{#{h(str)}}";	insertLabel(id);	return(true); end

	def insertLabel(id)
		puts "\\label{#{h(id)}}" if id.to_s != ""
		return(true);
	end

	def newpage()
		puts "\\newpage"
		return(true);
	end

	def close()
		puts "\\end{document}"
		return(super)
	end
end
